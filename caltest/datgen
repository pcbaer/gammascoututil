#!/usr/bin/python3
#
#	GammaScoutUtil - Tool to communicate with Gamma Scout Geiger counters.
#	Copyright (C) 2011-2019 Johannes Bauer
#
#	This file is part of GammaScoutUtil.
#
#	GammaScoutUtil is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	GammaScoutUtil is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with GammaScoutUtil; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>
#

import sys
import datetime

outfile = sys.argv[1]
hw = 0x1020
serial = 123456
now = datetime.datetime.now()
nowstr = now.strftime("%d.%m.%y %H:%M:%S")
orig_calibration_v6 = ("08 04 ab310b00", [
	(        755, bytes.fromhex("fb1d e1f6 8601")),
	(      11467, bytes.fromhex("0600 e6ff 7602")),
	( 4294967295, bytes.fromhex("5b16 acfc 6702")),
	(          0, bytes(6)),
	(          0, bytes(6)),
	(          0, bytes(6)),
	(          0, bytes(6)),
	(          0, bytes(6)),
])

orig_calibration_v7 = ("b0 00 07 7e 00", [
	(    2509, bytes.fromhex("1a05 f6da 2d00")),
	(    8602, bytes.fromhex("c1e1 acb1 2d00")),
	(   32154, bytes.fromhex("2f09 95c6 3c00")),
	(  172032, bytes.fromhex("0200 9af2 4b00")),
	(  542362, bytes.fromhex("0400 1cc2 3c00")),
	( 1277380, bytes.fromhex("8501 0e9e 2d00")),
	( 4513045, bytes.fromhex("9902 10b3 2d00")),
])

#version = "6.05"
#calibration = orig_calibration_v6
#softcal = False

version = "7.02"
calibration = orig_calibration_v7
softcal = True

def flt2counts(floatval):
	exponent = (floatval & 0xf800) >> 11
	mantissa = (floatval & 0x07ff)
	return mantissa * (1 << exponent)

def counts2flt(counts):
	exponent = 0
	mantissa = counts
	while mantissa > 0x3ff:
		mantissa //= 2
		exponent += 1
	return (((exponent) << 11) & 0xf800) | ((mantissa << 0) & 0x7ff)

with open(outfile, "w") as datfile:
	raw_data = bytearray()
	if version == "7.02":
		raw_data += bytes.fromhex("f5 ed 00 00 00 01 01 10")
		raw_data += bytes.fromhex("f5 0b")	# 1 minute intervals
	else:
		raw_data += bytes.fromhex("f5 ef 00 00 01 01 10")
		raw_data += bytes.fromhex("f5 0a")	# 1 minute intervals

	for i in range(20000):
		#counts = i
		#counts = round(i ** 1.2)
		counts = round(i ** 1.5)
		print(counts)
		raw_data += int.to_bytes(counts2flt(counts), length = 2, byteorder = "big")
	print("v", file = datfile)
	if version == "7.02":
		print("Version %sLb07 %04x %06d %04x %s" % (version, hw, serial, len(raw_data), nowstr), file = datfile)
	else:
		print("Version %s %06d %04x %s" % (version, serial, len(raw_data), nowstr), file = datfile)
	print("c", file = datfile)
	if softcal:
		print("GAMMA-SCOUT SoftCal gueltig", file = datfile)
	print("%s" % (calibration[0]), file = datfile)
	for (count, coefficients) in calibration[1]:
		count_data = int.to_bytes(count, length = 4, byteorder = "little")
		print("%s%s" % (count_data.hex(), coefficients.hex()), file = datfile)

	print("b", file = datfile)
	print("GAMMA-SCOUT Protokoll", file = datfile)

	for i in range(0, len(raw_data), 32):
		line_data = raw_data[i : i + 32]
		if len(line_data) != 32:
			line_data += bytes(32 - len(line_data))
		cksum = sum(line_data) & 0xff
		print("%s%02x" % (line_data.hex(), cksum), file = datfile)
